//----------------------------------------------------------------------------
//  Project dview
//  Some Company
//  Copyright 1999. All Rights reserved.
//
//  SUBSYSTEM:    dview Application
//  FILE:         dviewapp.cpp
//  AUTHOR:       Author
//
//  OVERVIEW
//  ~~~~~~~~
//  Source file for implementation of TdviewAppl (TApplication).
//  (Generated by OWL 6.x Wizard for MS VC++. Version 1.5)
//----------------------------------------------------------------------------
#include "owlpch.h"

#include <owl/docmanag.h>
#include <owl/filedoc.h>

#include "dviewapp.h"
#include "dviewcl.h" // Definition of client class.

//{{TdviewAppl Implementation}}

REGISTRATION_FORMAT_BUFFER(200)

//{{DOC_VIEW}}
DEFINE_DOC_TEMPLATE_CLASS(TFileDocument, TdviewView, DocType1);
//{{DOC_VIEW_END}}

//{{DOC_MANAGER}}
BEGIN_REGISTRATION(TdviewViewReg)
	REGDATA(description,_T("All Files"))
	REGDATA(extension,  _T("txt"))
	REGDATA(docfilter,  _T("*.*"))
	REGDOCFLAGS(dtAutoDelete|dtUpdateDir)
END_REGISTRATION
DocType1 __dvt1(TdviewViewReg);
//{{DOC_MANAGER_END}}

//
// Build a response table for all messages/commands handled by the application.
//
DEFINE_RESPONSE_TABLE1(TdviewAppl, TApplication)
//{{TdviewApplRSP_TBL_BEGIN}}
  EV_OWLVIEW(dnCreate, EvNewView),
  EV_OWLVIEW(dnClose,  EvCloseView),
//{{TdviewApplRSP_TBL_END}}
END_RESPONSE_TABLE;


//--------------------------------------------------------
// TdviewAppl
// ~~~~~
//
TdviewAppl::TdviewAppl() : TApplication(_T("dview"))
{
  SetDocManager(new TDocManager(dmSDI, this));
  // INSERT>> Your constructor code here.

}


TdviewAppl::~TdviewAppl()
{
  // INSERT>> Your destructor code here.

}

//--------------------------------------------------------
// TdviewAppl
// ~~~~~
// Application main window construction & intialization.
//
void TdviewAppl::InitMainWindow()
{
  if (nCmdShow != SW_HIDE)
    nCmdShow = (nCmdShow != SW_SHOWMINNOACTIVE) ? SW_SHOWNORMAL : nCmdShow;

  TSDIFrameWindow* frame = new TSDIFrameWindow(0, GetName());
	frame->Attr.H = 0;
	frame->Attr.W = 0;

  // Disable sizeing of dialog frame
  //
  frame->ModifyStyle(WS_THICKFRAME|WS_MAXIMIZEBOX|WS_MINIMIZEBOX,0);
  // Set frame size the same as dialog
  //
  frame->SetFlag(wfShrinkToClient);

  // Assign icons for this application.
  //
  frame->SetIcon(this, IDI_SDIAPPLICATION);
  frame->SetIconSm(this, IDI_SDIAPPLICATION);

  SetMainWindow(frame);
}

//--------------------------------------------------------
// TdviewAppl
// ~~~~~
// Application instance initialization.
//
void TdviewAppl::InitInstance()
{
  TApplication::InitInstance();
  GetDocManager()->CreateAnyDoc(0, dtNewDoc);
}
//--------------------------------------------------------
// TdviewAppl
// ~~~~~
// Response Table handlers:
//
void TdviewAppl::EvNewView(TView& view)
{
  GetMainWindow()->SetClientWindow(view.GetWindow());
  if (!view.IsOK())
    GetMainWindow()->SetClientWindow(0);
  else{
	  if (view.GetViewMenu())
      GetMainWindow()->MergeMenu(*view.GetViewMenu());
  }
}


void TdviewAppl::EvCloseView(TView&)
{
  GetMainWindow()->SetClientWindow(0);
  GetMainWindow()->SetCaption(_T("dview"));
}


//{{TSDIFrameWindow Implementation}}


TSDIFrameWindow::TSDIFrameWindow(TWindow* parent, LPCTSTR title, TWindow* clientWnd, bool shrinkToClient, TModule* module)
:
  TFrameWindow(parent, title, clientWnd, shrinkToClient, module)
{
  // INSERT>> Your constructor code here.

}


TSDIFrameWindow::~TSDIFrameWindow()
{
  // INSERT>> Your destructor code here.

}

//-------------------------------------------------------------------
// OwlMain
// ~~~~~~~
// Application Start here.
//
int OwlMain(int , LPTSTR [])
{
  return TdviewAppl().Run();
}
