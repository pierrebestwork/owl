//----------------------------------------------------------------------------
// OWL File Extensions (OWLFX) Class Library
// Copyright(c) 1999 by Yura Bidus.
// All rights reserved.
//
//$Revision: 1.1.4.2 $
//$Author: jogybl $
//$Date: 2009-10-23 10:49:57 $
//
//  OVERVIEW
//  ~~~~~~~~
//  Source file for implementation of DataBase Enabled Controls.
//  (Generated by OWL 6.x Class Expert for MS VC++, Version 1.5)
//----------------------------------------------------------------------------
#include <owlfx/pch.h>
#pragma hdrstop

#include <owlfx/dbctrls.h>

_OWLFX_BEGIN_NAMESPACE

__OWL_USING_NAMESPACE

static _TCHAR szBlank[] = _T("<blank>");

//-----------------------------------------------------------------------------
//{{TDBFiledName Implementation}}
TDBFiledName::TDBFiledName(TWindow* parent, int id, int fldId, 
						   TDBDataLink* link, uint textLen, TModule* module)
						   : 
TStatic(parent,id,textLen,module),
DBLink(link),
FieldId(fldId)
{
}
//-----------------------------------------------------------------------------
void TDBFiledName::SetupWindow()
{
	Inherited::SetupWindow();

	if(DBLink){
		owl_string text = DBLink->GetFieldName(FieldId);
		text += _T(":");
		SetText(text.c_str());
	}
}
//-----------------------------------------------------------------------------
void TDBFiledName::SetDBLink(TDBDataLink* link)
{
	DBLink = link;
	if(DBLink && GetHandle()){
		owl_string text = DBLink->GetFieldName(FieldId);
		text += _T(":");
		SetText(text.c_str());
	}
}
//-----------------------------------------------------------------------------
//{{TDBStatic Implementation}}
long TDBStatic::TBDEvent::FireEvent(TType type, long p1, long p2)
{
	if(type==cbRefresh){
		MEMBER_METHOD_PROLOGUE(TDBStatic, DBEvent, theParent);
		owl_string text;
		if(theParent->DBLink->GetField(theParent->FieldId, text))
			theParent->SetText(szBlank);
		else
			theParent->SetText(text.c_str());
	}
	else if(type==cbCommit){
		// no editable
	}
	return 0;
}
//-----------------------------------------------------------------------------
TDBStatic::TDBStatic(TWindow* parent, int id, int fldId, 
					 TDBDataLink* link, uint textLen, TModule* module)
					 : 
TStatic(parent,id,textLen,module),
DBLink(link),
FieldId(fldId)
{
}
//-----------------------------------------------------------------------------
void TDBStatic::SetupWindow()
{
	Inherited::SetupWindow();
	if(DBLink)
		DBLink->Register(&DBEvent);
}
//-----------------------------------------------------------------------------
void TDBStatic::CleanupWindow()
{
	if(DBLink)
		DBLink->Unregister(&DBEvent);
	Inherited::CleanupWindow();
}
//-----------------------------------------------------------------------------
void TDBStatic::SetDBLink(TDBDataLink* link)
{
	if(GetHandle() && DBLink)
		DBLink->Unregister(&DBEvent);
	DBLink = link;
	if(GetHandle() && DBLink)
		DBLink->Register(&DBEvent);
}
//-----------------------------------------------------------------------------
//{{TDBEdit Implementation}}
long TDBEdit::TBDEvent::FireEvent(TType type, long p1, long p2)
{
	MEMBER_METHOD_PROLOGUE(TDBEdit, DBEvent, theParent);
	if(type==cbRefresh){
		owl_string text;
		if(theParent->DBLink->GetField(theParent->FieldId, text))
			theParent->SetText(szBlank);
		else
			theParent->SetText(text.c_str());
	}
	else if(type==cbCommit){
		TTmpBuffer<char> buffer(MAX_PATH);
		theParent->GetText(buffer, MAX_PATH);
		if(_tcslen(buffer) && _tcscmp(buffer,szBlank)!=0)
			theParent->DBLink->SetField(1, buffer);
	}
	return 0;
}
//-----------------------------------------------------------------------------
TDBEdit::TDBEdit(TWindow* parent, int id, int fldId, 
				 TDBDataLink* link, uint textLen, TModule* module)
				 : 
TEdit(parent,id,textLen,module),
DBLink(link),
FieldId(fldId)
{
}
//-----------------------------------------------------------------------------
void TDBEdit::SetupWindow()
{
	Inherited::SetupWindow();
	if(DBLink)
		DBLink->Register(&DBEvent);
}
//-----------------------------------------------------------------------------
void TDBEdit::CleanupWindow()
{
	if(DBLink)
		DBLink->Unregister(&DBEvent);
	Inherited::CleanupWindow();
}
//-----------------------------------------------------------------------------
void TDBEdit::SetDBLink(TDBDataLink* link)
{
	if(GetHandle() && DBLink)
		DBLink->Unregister(&DBEvent);
	DBLink = link;
	if(GetHandle() && DBLink)
		DBLink->Register(&DBEvent);
}
//-----------------------------------------------------------------------------
//{{TDBBlobEdit Implementation}}
long TDBBlobEdit::TBDEvent::FireEvent(TType type, long p1, long p2)
{
	MEMBER_METHOD_PROLOGUE(TDBBlobEdit, DBEvent, theParent);
	if(type==cbRefresh){
		TPointer<TDBBlob> blob = theParent->DBLink->GetBlob(theParent->FieldId);
		uint32 size = blob->GetSize();
		if(size){
			TTmpBuffer<char> buffer(size);
			if(blob->Get(0,size, (uint8*)(char*)buffer)){
				((char*)buffer)[size] = 0;
				theParent->SetText((char*)buffer);
			}
			else
				theParent->Clear();
		}
		else
			theParent->Clear();
	}
	else if(type==cbCommit){
		_TCHAR* buffer = theParent->LockBuffer();

		TPointer<TDBBlob> blob = theParent->DBLink->GetBlob(theParent->FieldId);
		int size = _tcslen(buffer);
		if(size)
			blob->Set(0, size, (uint8*)buffer);
		theParent->UnlockBuffer(buffer);

	}
	return 0;
}
//-----------------------------------------------------------------------------
TDBBlobEdit::TDBBlobEdit(TWindow* parent, int id, int fldId, 
						 TDBDataLink* link, uint textLen, TModule* module)
						 : 
TEdit(parent,id,textLen,module),
DBLink(link),
FieldId(fldId)
{
}
//-----------------------------------------------------------------------------
void TDBBlobEdit::SetupWindow()
{
	Inherited::SetupWindow();
	if(DBLink)
		DBLink->Register(&DBEvent);
}
//-----------------------------------------------------------------------------
void TDBBlobEdit::CleanupWindow()
{
	if(DBLink)
		DBLink->Unregister(&DBEvent);
	Inherited::CleanupWindow();
}
//-----------------------------------------------------------------------------
void TDBBlobEdit::SetDBLink(TDBDataLink* link)
{
	if(GetHandle() && DBLink)
		DBLink->Unregister(&DBEvent);
	DBLink = link;
	if(GetHandle() && DBLink)
		DBLink->Register(&DBEvent);
}
//-----------------------------------------------------------------------------
//{{TDBDate Implementation}}
long TDBDate::TBDEvent::FireEvent(TType type, long p1, long p2)
{
	MEMBER_METHOD_PROLOGUE(TDBDate, DBEvent, theParent);
	if(type==cbRefresh){
		TDate date;
		if(theParent->DBLink->GetField(theParent->FieldId, date))
			theParent->SetNoTime();
		else
			theParent->SetTime(date.GetSystemTime());
	}
	else if(type==cbCommit){
		TSystemTime stime; 
		int retval = theParent->GetTime(stime);
		if(retval = GDT_VALID){
			TDate date(stime);
			theParent->DBLink->SetField(theParent->FieldId, date);
		}
		else if(retval = GDT_NONE)
			theParent->DBLink->SetBlank(theParent->FieldId);
		else
			TXOwl(IDS_UNKNOWNERROR).Throw();
	}
	return 0;
}
//-----------------------------------------------------------------------------
TDBDate::TDBDate(TWindow* parent, int id, int fldId, TDBDataLink* link, 
				 TModule* module)
				 : 
TDateTimePicker(parent,id,module),
DBLink(link),
FieldId(fldId)
{
}
//-----------------------------------------------------------------------------
void TDBDate::SetupWindow()
{
	Inherited::SetupWindow();
	if(DBLink)
		DBLink->Register(&DBEvent);
}
//-----------------------------------------------------------------------------
void TDBDate::CleanupWindow()
{
	if(DBLink)
		DBLink->Unregister(&DBEvent);
	Inherited::CleanupWindow();
}
//-----------------------------------------------------------------------------
void TDBDate::SetDBLink(TDBDataLink* link)
{
	if(GetHandle() && DBLink)
		DBLink->Unregister(&DBEvent);
	DBLink = link;
	if(GetHandle() && DBLink)
		DBLink->Register(&DBEvent);
}
//-----------------------------------------------------------------------------
//{{TDBTime Implementation}}
long TDBTime::TBDEvent::FireEvent(TType type, long p1, long p2)
{
	MEMBER_METHOD_PROLOGUE(TDBTime, DBEvent, theParent);
	if(type==cbRefresh){
		TTime ttime;
		if(theParent->DBLink->GetField(theParent->FieldId, ttime))
			theParent->SetNoTime();
		else
			theParent->SetTime(ttime.GetSystemTime());
	}
	else if(type==cbCommit){
		TSystemTime stime;
		int retval = theParent->GetTime(stime);
		if(retval = GDT_VALID){
			TTime ttime(stime);
			theParent->DBLink->SetField(theParent->FieldId, ttime);
		}
		else if(retval = GDT_NONE)
			theParent->DBLink->SetBlank(theParent->FieldId);
		else
			TXOwl(IDS_UNKNOWNERROR).Throw();
	}
	return 0;
}
//-----------------------------------------------------------------------------
TDBTime::TDBTime(TWindow* parent, int id, int fldId, 
				 TDBDataLink* link, TModule* module)
				 : 
TDateTimePicker(parent,id,module),
DBLink(link),
FieldId(fldId)
{
	ModifyStyle(0, DTS_TIMEFORMAT);
}
//-----------------------------------------------------------------------------
void TDBTime::SetupWindow()
{
	Inherited::SetupWindow();
	if(DBLink)
		DBLink->Register(&DBEvent);
}
//-----------------------------------------------------------------------------
void TDBTime::CleanupWindow()
{
	if(DBLink)
		DBLink->Unregister(&DBEvent);
	Inherited::CleanupWindow();
}
//-----------------------------------------------------------------------------
void TDBTime::SetDBLink(TDBDataLink* link)
{
	if(GetHandle() && DBLink)
		DBLink->Unregister(&DBEvent);
	DBLink = link;
	if(GetHandle() && DBLink)
		DBLink->Register(&DBEvent);
}
//-----------------------------------------------------------------------------
//{{TDBBlobImage Implementation}}
// Internal DIB file Read/Write functions talk to this IO implementation
//
class TBlobImageI : public TDib::IFileIn {
public:
	TBlobImageI(uint8* data) : Data(data+8) {}

	virtual long Read(void* buffer, long size)
	{
		memcpy(buffer, Data, size);
		Data += size;
		return size;
	}
	virtual void Skip(long size) 
	{ 
		Data += size; 
	}
private:
	uint8* Data;
};
//-----------------------------------------------------------------------------
class TBlobImageO : public TDib::IFileOut {
public:
	TBlobImageO(uint clr):Data(0),CurPtr(0),Reserved(0)
	{
		Write(&clr, sizeof(clr));
		Write(&clr, sizeof(clr));
	}

	virtual bool Write(void* buffer, long size)
	{
		if(CurPtr+size-Data >= Reserved)
			Grow(Reserved*2);
		memcpy(CurPtr, buffer, size);
		CurPtr += size;
		return true;
	}
	void Grow(uint size)
	{
		uint8* ptr = new uint8[size];
		memmove(ptr,Data,CurPtr-Data);
		delete[] Data;
		Data = CurPtr = ptr;
		Reserved = size;
	}
	void Close()
	{
		uint* sz = (uint*)(Data+4);
		*sz = CurPtr-Data;
	}
	uint8* DataPtr()	{ return Data;				}
	long	 Size()			{ return CurPtr-Data; }

private:
	uint8* Data;
	uint8* CurPtr;
	uint   Reserved;
};
//-----------------------------------------------------------------------------
class TBlobDib: public TDib{
public:
	TBlobDib(TBlobImageI& file)
	{
		if(!Read(file, true))
			TXGdi::Raise(IDS_GDIFILEREADFAIL);
	}
	friend struct TDBBlobImage::TBDEvent;
};
//-----------------------------------------------------------------------------
long TDBBlobImage::TBDEvent::FireEvent(TType type, long p1, long p2)
{
	MEMBER_METHOD_PROLOGUE(TDBBlobImage, DBEvent, theParent);
	if(type==cbRefresh){
		TPointer<TDBBlob> blob = theParent->DBLink->GetBlob(theParent->FieldId);
		uint32 size = blob->GetSize();
		TDib* newDib = 0;
		if(size){
			TTmpBuffer<uint8> buffer(size);
			if(blob->Get(0,size, (uint8*)buffer)){
				TBlobImageI blob_i(buffer);
				newDib = new TBlobDib(blob_i);
			}
		}
		delete theParent->SetDib(newDib);
		theParent->Invalidate();
	}
	else if(type==cbCommit){
		TBlobDib* dib = (TBlobDib*)theParent->GetDib();
		if(dib){
			TBlobImageO blob_o(dib->NumColors()); 
			if(dib->Write(blob_o, true)){
				blob_o.Close();
				TPointer<TDBBlob> blob = theParent->DBLink->GetBlob(theParent->FieldId);
				blob->Set(0, blob_o.Size(), blob_o.DataPtr());
			}
		}
	}
	return 0;
}
//-----------------------------------------------------------------------------
TDBBlobImage::TDBBlobImage(TWindow* parent, int id, int fldId, 
						   TDBDataLink* link, TModule* module)
						   : 
TPictureControl(parent,id,module),
DBLink(link),
FieldId(fldId)
{
}
//-----------------------------------------------------------------------------
void TDBBlobImage::SetupWindow()
{
	Inherited::SetupWindow();
	if(DBLink)
		DBLink->Register(&DBEvent);
}
//-----------------------------------------------------------------------------
void TDBBlobImage::CleanupWindow()
{
	if(DBLink)
		DBLink->Unregister(&DBEvent);
	Inherited::CleanupWindow();
}
//-----------------------------------------------------------------------------
void TDBBlobImage::SetDBLink(TDBDataLink* link)
{
	if(GetHandle() && DBLink)
		DBLink->Unregister(&DBEvent);
	DBLink = link;
	if(GetHandle() && DBLink)
		DBLink->Register(&DBEvent);
}
//-----------------------------------------------------------------------------
_OWLFX_END_NAMESPACE

/* ========================================================================== */
